import { z } from "zod";
import { router, publicProcedure } from "../trpc";

export type Contact = {
  contactId: string; // PK
  name: string; // NOT NULL
  phone: string; // NOT NULL
  address: string; // NOT NULL
  email: string; // NOT NULL
  subject: string; // NOT NULL
  content: string; // NOT NULL
  createdAt: string; // DATETIME -> ISO string
};

export const contactRouter = router({
  create: publicProcedure
    .input(
      z.object({
        name: z.string(),
        phone: z.string(),
        address: z.string(),
        email: z.string().email(), // Added email validation for good practice
        subject: z.string(),
        content: z.string(),
        // createdAt is typically generated by the server, so it's often not in the input
      })
    )
    .mutation(async ({ input }) => {
      const newContact = {
        ...input,
        contactId: `CONT-${Date.now()}`, // Example of generating an ID
        createdAt: new Date().toISOString(), // Generate timestamp on the server
      };
      
      // Logic to save `newContact` to your database would go here
      console.log("New contact to save:", newContact);

      return { success: true, contact: newContact };
    }),
});